/***************************************************************************
Stack Machine
***************************************************************************/
/*=========================================================================
DECLARATIONS
=========================================================================*/
/* OPERATIONS: Internal Representation */
#include <math.h>
enum code_ops { HALT, STORE, JMP_FALSE, GOTO,
DATA, LD_INT, LD_VAR,
READ_INT, WRITE_INT,
LT,LTE, EQ, GT,GTE,NEQ,MOD,MODUL,POINCR,PODECR,PRINCR,PRDECR, ADD,
 SUB, MULT, DIV, PWR, BITAND,BITOR,BITXOR,BITLSH,BITRSH,COMP,ORTEST,ANDTEST,
 SHORTADD,SHORTBITAND,SHORTBITLSH,SHORTBITOR,SHORTBITRSH,SHORTBITXOR,
 SHORTDIV,SHORTMOD,SHORTMULT,SHORTSUB,NEG };
/* OPERATIONS: External Representation */
char *op_name[] = {"halt", "store", "jmp_false", "goto",

"data", "ld_int", "ld_var",
"in_int", "out_int",
"lt","lte", "eq", "gt","gte","neq","mod","poincr","podecr","princr","prdecr","modul",
 "add", "sub", "mult", "div", "pwr","bitand","bitor","bitxor","shortand","shortxor",
 "shortadd","shortsub","shortmult","shortdiv","shortmodul","shortbitand","shortbitor",
 "shortbitxor","andtest","ortest","comp","shortbitlsh","shortbitrsh",
 "bitlsh","bitrsh","neg" };
struct instruction
{
enum code_ops op;
int arg;
};
/* CODE Array */
struct instruction code[999];
/* RUN-TIME Stack */
int stack[999];
/*-------------------------------------------------------------------------
Registers
-------------------------------------------------------------------------*/
int pc = 0;
struct instruction ir;
int ar = 0;
int top = 0;
char ch;
/*=========================================================================
Fetch Execute Cycle
=========================================================================*/
void fetch_execute_cycle()
{ do { /*printf( "PC = %3d IR.arg = %8d AR = %3d Top = %3d,%8d\n",
pc, ir.arg, ar, top, stack[top]); */
/* Fetch */
ir = code[pc++];
/* Execute */
switch (ir.op) {
case HALT : printf( "halt\n" ); break;
case READ_INT : printf( "fulin: " );
scanf( "%ld", &stack[ar+ir.arg] ); break;
case WRITE_INT : printf( "fulout: %d\n", stack[top--] ); break;
case STORE : stack[ir.arg] = stack[top--]; break;
case JMP_FALSE : if ( stack[top--] == 0 )
pc = ir.arg;
break;
case GOTO : pc = ir.arg; break;
case DATA : top = top + ir.arg; break;

case LD_INT : stack[++top] = ir.arg; break;
case LD_VAR : stack[++top] = stack[ar+ir.arg]; break;
case LT : if ( stack[top-1] < stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case LTE : if ( stack[top-1] <= stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case EQ : if ( stack[top-1] == stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case NEQ : if ( stack[top-1] != stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case MODUL : stack[top-1] = fmod(stack[top-1] ,stack[top]);
break;

case GT : if ( stack[top-1] > stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case GTE : if ( stack[top-1] >= stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case ANDTEST : if ( stack[top-1] && stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case ORTEST : if ( stack[top-1] || stack[top] )
stack[--top] = 1;
else stack[--top] = 0;
break;
case NEG : stack[top-1] = - stack[top-1];
top--;
break;
case COMP : stack[top-1] = ~ stack[top-1];
top--;
break;

case POINCR : stack[top-1] = stack[top-1] + 1;
top--;
break;
case PODECR : stack[top-1] = stack[top-1] - 1;
top--;
break;
case PRINCR : stack[top-1] = ++stack[top-1];
top--;
break;
case PRDECR : stack[top-1] = --stack[top-1];
top--;
break;
case ADD : stack[top-1] = stack[top-1] + stack[top];
top--;
break;
case SUB : stack[top-1] = stack[top-1] - stack[top];
top--;
break;
case MULT : stack[top-1] = stack[top-1] * stack[top];
top--;
break;
case DIV : stack[top-1] = stack[top-1] / stack[top];
top--;
break;
case PWR : stack[top-1] = pow(stack[top-1] ,stack[top]);
top--;
break;
case MOD : stack[top-1] = fmod(stack[top-1] ,stack[top]);
top--;
break;
case BITAND : stack[top-1] = stack[top-1] & stack[top];
top--;
break;
case BITOR : stack[top-1] = stack[top-1] | stack[top];
top--;
break;
case BITXOR : stack[top-1] = stack[top-1] ^ stack[top];
top--;
break;
case BITRSH : stack[top-1] = stack[top-1] >> stack[top];
top--;
break;
case BITLSH : stack[top-1] = stack[top-1] << stack[top];
top--;
break;


case SHORTADD : stack[top-1] = stack[top-1] + stack[top];
top--;
break;
case SHORTSUB : stack[top-1] = stack[top-1] - stack[top];
top--;
break;
case SHORTMULT : stack[top-1] = stack[top-1] * stack[top];
top--;
break;
case SHORTDIV : stack[top-1] = stack[top-1] / stack[top];
top--;
break;
case SHORTMOD : stack[top-1] = stack[top-1] % stack[top];
top--;
break;
case SHORTBITAND : stack[top-1] = stack[top-1] & stack[top];
top--;
break;
case SHORTBITOR : stack[top-1] = stack[top-1] | stack[top];
top--;
break;
case SHORTBITXOR : stack[top-1] = stack[top-1] ^ stack[top];
top--;
break;
case SHORTBITRSH : stack[top-1] = stack[top-1] >> stack[top];
top--;
break;
case SHORTBITLSH : stack[top-1] = stack[top-1] << stack[top];
top--;
break;


default : printf( "%sInternal Error: Memory Dump\n" );
break;
}
}
while (ir.op != HALT);
}
/*************************** End Stack Machine **************************/
